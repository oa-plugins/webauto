# scheduled_monitoring.oas - Website Monitoring and Change Detection
# Designed for CI/CD cron jobs to monitor website changes

@set MONITORED_URLS = [
  "https://playwright.dev/docs/intro",
  "https://example.com"
]
@set OUTPUT_DIR = "./output/monitoring"
@set BASELINE_DIR = "${OUTPUT_DIR}/baseline"
@set CURRENT_DIR = "${OUTPUT_DIR}/current"
@set ALERT_ON_CHANGE = true

@echo "=== Scheduled Website Monitoring ==="
@echo "Monitoring ${MONITORED_URLS.length} URLs"
@echo "Alert on change: ${ALERT_ON_CHANGE}"
@echo ""

# Create directory structure
@if not exists("${BASELINE_DIR}")
  @mkdir "${BASELINE_DIR}"
@endif

@if not exists("${CURRENT_DIR}")
  @mkdir "${CURRENT_DIR}"
@endif

@set SESSION_ID = "monitoring_session"
@set TIMESTAMP = "$(date +%Y%m%d_%H%M%S)"
@set CHANGES_DETECTED = 0

@try
  # Launch browser
  @echo "Launching monitoring session..."
  oa plugin exec webauto browser-launch \
    --session-id "${SESSION_ID}" \
    --headless true

  @echo "‚úÖ Monitoring session started"
  @echo ""

  # Monitor each URL
  @set URL_INDEX = 0

  @foreach url in ${MONITORED_URLS}
    @set URL_INDEX = ${URL_INDEX} + 1
    @echo "[${URL_INDEX}/${MONITORED_URLS.length}] Monitoring: ${url}"

    @try
      # Navigate to URL
      oa plugin exec webauto page-navigate \
        --session-id "${SESSION_ID}" \
        --page-url "${url}"

      @sleep 2000

      # Generate safe filename
      @set URL_NAME = "$(echo ${url} | sed 's|https://||' | sed 's|http://||' | sed 's|/|_|g')"

      # Capture current state
      @echo "  Capturing current state..."
      oa plugin exec webauto page-screenshot \
        --session-id "${SESSION_ID}" \
        --image-path "${CURRENT_DIR}/${URL_NAME}_${TIMESTAMP}.png"

      # Get page HTML
      oa plugin exec webauto page-get-html \
        --session-id "${SESSION_ID}" \
        --output-file "${CURRENT_DIR}/${URL_NAME}_${TIMESTAMP}.html"

      # Check if baseline exists
      @if exists("${BASELINE_DIR}/${URL_NAME}_baseline.png")
        @echo "  Baseline exists, comparing..."

        # TODO: Actual image comparison would require external tool
        # For now, just check file sizes as proxy
        @set BASELINE_SIZE = "$(stat -f%z ${BASELINE_DIR}/${URL_NAME}_baseline.png 2>/dev/null || echo 0)"
        @set CURRENT_SIZE = "$(stat -f%z ${CURRENT_DIR}/${URL_NAME}_${TIMESTAMP}.png 2>/dev/null || echo 0)"

        @set SIZE_DIFF = ${CURRENT_SIZE} - ${BASELINE_SIZE}
        @set ABS_DIFF = "$(echo ${SIZE_DIFF} | sed 's/-//')"

        # If size difference > 10%, flag as changed
        @set THRESHOLD = ${BASELINE_SIZE} / 10

        @if ${ABS_DIFF} > ${THRESHOLD}
          @echo "  ‚ö†Ô∏è  CHANGE DETECTED!"
          @echo "     Baseline size: ${BASELINE_SIZE} bytes"
          @echo "     Current size: ${CURRENT_SIZE} bytes"
          @echo "     Difference: ${SIZE_DIFF} bytes"

          @set CHANGES_DETECTED = ${CHANGES_DETECTED} + 1

          # Save change report
          @echo "{\"url\": \"${url}\", \"timestamp\": \"${TIMESTAMP}\", \"baseline_size\": ${BASELINE_SIZE}, \"current_size\": ${CURRENT_SIZE}, \"size_diff\": ${SIZE_DIFF}}" > "${CURRENT_DIR}/${URL_NAME}_change_report.json"

        @else
          @echo "  ‚úÖ No significant changes detected"
        @endif

      @else
        @echo "  No baseline found, creating new baseline..."

        # Copy current screenshot as baseline
        @echo "  Copying to baseline directory..."
        # In actual usage, would use cp command or similar

        @echo "  ‚úÖ Baseline created"
      @endif

    @catch
      @echo "  ‚ùå Failed to monitor ${url}"
    @endtry

    @echo ""
  @endforeach

  # Generate monitoring report
  @echo "Generating monitoring report..."
  @set REPORT_FILE = "${OUTPUT_DIR}/monitoring_report_${TIMESTAMP}.json"

  @echo "{
  \"timestamp\": \"${TIMESTAMP}\",
  \"urls_monitored\": ${URL_INDEX},
  \"changes_detected\": ${CHANGES_DETECTED},
  \"alert_triggered\": $(if [ ${CHANGES_DETECTED} -gt 0 ]; then echo true; else echo false; fi)
}" > "${REPORT_FILE}"

  @echo "‚úÖ Report saved: ${REPORT_FILE}"
  @echo ""

  @echo "=========================================="
  @echo "Monitoring Summary"
  @echo "=========================================="
  @echo ""
  @echo "URLs monitored: ${URL_INDEX}"
  @echo "Changes detected: ${CHANGES_DETECTED}"
  @echo ""

  # Alert if changes detected
  @if ${CHANGES_DETECTED} > 0 and ${ALERT_ON_CHANGE} == true
    @echo "üö® ALERT: ${CHANGES_DETECTED} change(s) detected!"
    @echo ""
    @echo "Action required:"
    @echo "  1. Review change reports in: ${CURRENT_DIR}/"
    @echo "  2. Compare screenshots manually"
    @echo "  3. Update baselines if changes are expected"
    @echo ""
  @else
    @echo "‚úÖ All monitored sites stable (no changes detected)"
    @echo ""
  @endif

  @echo "Output directories:"
  @echo "  - Baseline: ${BASELINE_DIR}/"
  @echo "  - Current: ${CURRENT_DIR}/"
  @echo ""

@catch
  @echo "‚ùå Monitoring session failed"
@finally
  @echo "Closing monitoring session..."
  oa plugin exec webauto browser-close --session-id "${SESSION_ID}"
@endtry
